export declare class SPU {
    private regs;
    private ram;
    private xferAddrHW;
    private irqAddrHW;
    private irqEnabled;
    private irqFlag;
    private irqHandler?;
    private masterVolL;
    private masterVolR;
    private reverbVolL;
    private reverbVolR;
    private voiceStartUnits;
    private voices;
    read16(addr: number): number;
    write16(addr: number, v: number): void;
    setInterpolationMode(mode: 'linear' | 'gaussian'): void;
    private quantizeInMix;
    setQuantizeInMix(on: boolean): void;
    setMasterVolume(volL_0_0x3fff: number, volR_0_0x3fff: number): void;
    setVoiceVolume(voice: number, volL_0_0x3fff: number, volR_0_0x3fff: number): void;
    setVoiceKeyOn(voice: number, on: boolean): void;
    setVoiceADSR(voice: number, attackSamples: number, decaySamples: number, sustainLevel01: number, releaseSamples: number): void;
    enqueuePCM(voice: number, samples: Int16Array): void;
    appendPCM(voice: number, samples: Int16Array): void;
    dmaWriteToRAM(samplesLE: Uint16Array): void;
    dmaReadFromRAM(countHalfwords: number): Uint16Array;
    loadPCMFromRAM(voice: number, addrUnits8Bytes: number, halfwords: number, replace?: boolean): void;
    setVoiceStreamFromRAM(voice: number, addrUnits8Bytes: number): void;
    clearVoiceStream(voice: number): void;
    setVoicePitch(voice: number, stepFP: number): void;
    setVoiceLoop(voice: number, start: number, end: number, enabled: boolean): void;
    private updateVoiceADSR;
    private stepEnv;
    mix(frames: number, raw?: boolean): Float32Array;
    private ring;
    private ringFrames;
    private ringRd;
    private ringWr;
    private noiseLfsr;
    private noiseFreq;
    private noiseLast;
    private pmLastEnv;
    private pmDepth;
    private interpMode;
    private gaussSteps;
    private gaussW0;
    private gaussW1;
    private gaussW2;
    private gaussW3;
    private ensureGaussLUT;
    private rvbL;
    private rvbR;
    private rvbSize;
    private rvbIdx;
    private rvbDelay;
    private rvbFeedback;
    private rvbSendGain;
    private rvbLPAlpha;
    private rvbLPStateL;
    private rvbLPStateR;
    attachIRQ(handler: () => void): void;
    private maybeTriggerIRQ;
    configureRing(capacityFrames: number): void;
    stepMix(frames: number): void;
    private nextNoiseFloat;
    private streamInterpolatedSample;
    private ensureCurrentBlock;
    private advanceToNextBlock;
    private peekNextFirstSample;
    availableFrames(): number;
    pullStereo(nFrames: number): Float32Array;
    serialize(): any;
    deserialize(s: any): void;
}
//# sourceMappingURL=spu.d.ts.map